Procedure 1.



DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AdminOperations`(
    IN admin_id_param INT,
    IN operation_type VARCHAR(255),
    IN store_id_param INT,
    IN new_store_name_param VARCHAR(255),
    IN new_operating_hours_param VARCHAR(255),
    IN new_contact_param VARCHAR(255),
    IN new_address_param VARCHAR(255)
)
BEGIN
    DECLARE admin_exists INT;

    -- Check if the admin exists
    SELECT COUNT(*) INTO admin_exists
    FROM admin
    WHERE admin_id = admin_id_param;

    -- If admin exists, perform the operation
    IF admin_exists > 0 THEN
        -- Perform operations based on the operation_type parameter
        CASE operation_type
            WHEN 'add_store' THEN
                -- Add a new store
                INSERT INTO grocery (store_name, oprating_hours, contact, address)
                VALUES (new_store_name_param, new_operating_hours_param, new_contact_param, new_address_param);

            WHEN 'update_store' THEN
                -- Update store information
                UPDATE grocery
                SET store_name = new_store_name_param,
                    oprating_hours = new_operating_hours_param,
                    contact = new_contact_param,
                    address = new_address_param
                WHERE store_id = store_id_param;

            WHEN 'delete_store' THEN
                -- Delete a store
                DELETE FROM grocery
                WHERE store_id = store_id_param;

            ELSE
                -- Handle other operation types if needed
                SIGNAL SQLSTATE '45000'
                SET MESSAGE_TEXT = 'Invalid operation_type parameter';
        END CASE;

    ELSE
        -- Admin does not exist
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Admin does not exist';
    END IF;

END$$
DELIMITER ;



Procedure 2.


DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetAllCustomers`()
BEGIN
    SELECT c.customer_id, c.name, c.address, c.contact, w.balance
    FROM customer c
    LEFT JOIN wallet w ON c.wallet_id = w.wallet_id;
END$$
DELIMITER ;


Procedure 3

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetOfferValidityDays`(IN offerId INT, OUT validityDays INT)
BEGIN
    DECLARE validFrom DATE;
    DECLARE validTo DATE;

    -- Get valid_from and valid_to for the given offer_id
    SELECT valid_from, valid_to INTO validFrom, validTo
    FROM Offer
    WHERE offer_id = offerId;

    -- Calculate the difference in days
    SET validityDays = DATEDIFF(validTo, validFrom);
END$$
DELIMITER ;
